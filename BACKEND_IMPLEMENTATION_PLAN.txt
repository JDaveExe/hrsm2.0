================================================================================
                    MAYBUNGA HEALTHCARE MANAGEMENT SYSTEM
                        BACKEND IMPLEMENTATION PLAN
================================================================================
Date: July 21, 2025
Project: Healthcare Records & Management System (HRSM2)
Frontend Status: READY FOR BACKEND INTEGRATION

================================================================================
📋 TABLE OF CONTENTS
================================================================================
1. SYSTEM READINESS ASSESSMENT
2. BACKEND ARCHITECTURE OVERVIEW
3. PHASE-BY-PHASE IMPLEMENTATION PLAN
4. DATABASE DESIGN & SCHEMAS
5. API ENDPOINTS SPECIFICATION
6. AUTHENTICATION & SECURITY
7. FRONTEND INTEGRATION STRATEGY
8. DEPLOYMENT & TESTING PLAN
9. PROJECT TIMELINE
10. TECHNICAL REQUIREMENTS

================================================================================
🔍 1. SYSTEM READINESS ASSESSMENT
================================================================================

✅ FRONTEND STATUS: EXCELLENT & READY
------------------------------------------
✓ Complete UI Implementation (Admin, Doctor, Patient dashboards)
✓ Professional Design with Dark Mode Support
✓ Axios HTTP Client Already Installed
✓ Clear Data Models Defined in Sample Data
✓ State Management with useState Hooks Ready
✓ Error Handling Placeholders in Place
✓ Responsive Layout with Bootstrap Integration
✓ Navigation & Routing System Complete

🔄 UPDATED WORKFLOW REQUIREMENTS
------------------------------------------
✓ Patient Check-in via QR Code Scanning (prevents accidental check-ins)
✓ Staff-Assisted Registration for Elderly/PWD patients
✓ Service Type Selection Based on Daily Schedule
✓ Vital Signs Collection with Dropdown Validation
✓ Time-Based Service Availability (Morning/Afternoon)
✓ "Notify Doctor" Button (enabled after vital signs completion)

📊 CURRENT FRONTEND COMPONENTS:
------------------------------------------
• AdminDashboard.js - Patient management, family groups, statistics
• DocDashboard.js - Checkups, appointments, patient database, settings
• PatientDashboard.js - Profile, medical records, prescriptions, settings
• LoginSignup.js - Authentication forms with QR code generation
• Header.js - Navigation and branding
• Homepage.js - Landing page with system overview

🗃️ DEFINED DATA STRUCTURES:
------------------------------------------
• User Profiles (Admin, Doctor, Patient)
• Patient Information & Medical History
• Appointment Scheduling & Management
• Medical Records (Treatment, Dental, Immunization)
• Prescription Management (Active & Historical)
• Family Grouping System
• Dashboard Statistics & Analytics

================================================================================
� 1.1. HEALTHCARE CENTER WORKFLOW & SCHEDULE
================================================================================

PATIENT FLOW PROCESS:
------------------------------------------
1. REGISTRATION:
   • Online Registration (with "login instead" for existing accounts)
   • Staff-Assisted Registration (via Admin "Add Patient" button)
   • QR Code Generation upon successful registration

2. CHECK-IN PROCESS:
   • QR Code Scan for Check-in (prevents accidental check-ins from account access)
   • Appears in "Today's Checkup" in Admin Dashboard
   • Service Type Selection (based on time/schedule availability)

3. VITAL SIGNS COLLECTION:
   • Required for: Consultation, Dental w/ Procedure, Follow-up, Out-Patient, Dental w/ Fluoride, Parental
   • Not Required for: Simple Dental Consultation, Vaccination
   • Dropdown-based input validation (no free typing)
   • Editable only via Edit button after initial entry

4. DOCTOR NOTIFICATION:
   • "Notify Doctor" button enabled after vital signs completion
   • Updates doctor's dashboard with ready patients

DAILY SERVICE SCHEDULE:
------------------------------------------
MONDAY:
Morning (8:00 AM - 12:00 PM): Consultation, Dental Consultation & Procedure, Vaccination
Afternoon (1:00 PM - 5:00 PM): Follow Up Consultation, Dental Consultation, Vaccination

TUESDAY:
Morning (8:00 AM - 12:00 PM): Out-Patient Consultation, Vaccination
Afternoon (1:00 PM - 5:00 PM): Follow Up Consultation, Dental Consultation, Vaccination

WEDNESDAY:
Morning (8:00 AM - 12:00 PM): Dental Consultation & Fluoride Varnish Application, Vaccination
Afternoon (1:00 PM - 5:00 PM): Follow Up Consultation, Dental Consultation, Vaccination

THURSDAY:
Morning (8:00 AM - 12:00 PM): Out-Patient Consultation, Dental Consultation & Procedure, Vaccination
Afternoon (1:00 PM - 5:00 PM): Follow Up Consultation, Dental Consultation, Vaccination

FRIDAY:
Morning (8:00 AM - 12:00 PM): Parental Consultation, Vaccination
Afternoon (1:00 PM - 5:00 PM): Follow Up Consultation, Dental Consultation, Vaccination

WEEKEND: No services available

VACCINATION SERVICES:
------------------------------------------
• BCG (Bacillus Calmette-Guérin) - TB protection
• Hepatitis B
• Polio (OPV/IPV)
• DTaP/DTP - Diphtheria, tetanus, pertussis
• MMR - Measles, mumps, rubella
• Varicella - Chickenpox
• Pneumococcal
• Hepatitis A
• Influenza - Seasonal flu
• Rabies Vaccine

VITAL SIGNS REQUIREMENTS:
------------------------------------------
Services REQUIRING Vital Signs:
✓ Consultation
✓ Dental Consultation & Procedure
✓ Follow Up Consultation
✓ Out-Patient Consultation
✓ Dental Consultation & Fluoride Varnish Application
✓ Parental Consultation
✓ Vaccination

Services NOT Requiring Vital Signs:
✗ Dental Consultation (simple consultation only)

================================================================================
�🏗️ 2. BACKEND ARCHITECTURE OVERVIEW
================================================================================

TECHNOLOGY STACK:
------------------------------------------
• Runtime: Node.js 18+
• Framework: Express.js 4.18+
• Database: MongoDB with Mongoose ODM
• Authentication: JWT + bcrypt
• File Upload: Multer
• Email Service: Nodemailer
• QR Codes: qrcode library
• Validation: express-validator
• Security: helmet, cors, rate-limiting

PROJECT STRUCTURE:
------------------------------------------
backend/
├── server.js                    # Express server entry point
├── config/
│   ├── database.js             # MongoDB connection
│   ├── auth.js                 # JWT configuration  
│   └── email.js                # Email service config
├── models/                     # Database schemas
│   ├── User.js                 # User accounts (Admin, Doctor, Patient)
│   ├── Patient.js              # Patient profiles & medical info
│   ├── Appointment.js          # Appointment scheduling
│   ├── MedicalRecord.js        # Medical history records
│   ├── Prescription.js         # Medication prescriptions
│   ├── Family.js               # Family grouping
│   └── Notification.js         # System notifications
├── routes/                     # API endpoint definitions
│   ├── auth.js                 # Authentication endpoints
│   ├── admin.js                # Admin dashboard APIs
│   ├── doctor.js               # Doctor dashboard APIs
│   ├── patient.js              # Patient dashboard APIs
│   └── shared.js               # Shared utilities APIs
├── middleware/                 # Custom middleware
│   ├── auth.js                 # JWT verification
│   ├── validation.js           # Input validation
│   ├── roleCheck.js            # Role-based access control
│   └── upload.js               # File upload handling
├── utils/                      # Helper functions
│   ├── emailService.js         # Email notifications
│   ├── qrGenerator.js          # QR code generation
│   ├── dateUtils.js            # Date formatting utilities
│   └── validators.js           # Custom validation rules
└── uploads/                    # File storage directory
    ├── avatars/                # User profile images
    ├── documents/              # Medical documents
    └── reports/                # Generated reports

================================================================================
📅 3. PHASE-BY-PHASE IMPLEMENTATION PLAN
================================================================================

PHASE 1: FOUNDATION SETUP (Days 1-2) ✅ COMPLETED
------------------------------------------
Day 1: ✅ COMPLETED
✓ Initialize backend project structure
✓ Install and configure dependencies
✓ Set up Express.js server with basic middleware
✓ Configure MongoDB connection
✓ Create environment configuration (.env)
✓ Set up basic error handling middleware

Day 2: ✅ COMPLETED
✓ Design and implement database schemas
✓ Set up JWT authentication configuration
✓ Create basic auth middleware
✓ Implement password hashing utilities
✓ Test database connection and basic server functionality

PHASE 2: AUTHENTICATION & CHECK-IN SYSTEM (Days 3-4)
------------------------------------------
Day 3:
□ Implement enhanced authentication routes with duplicate checking
□ Create QR code-based check-in system
□ Implement service schedule management
□ Add check-in session tracking
□ Create role-based access control middleware

Day 4:
□ Implement staff-assisted patient registration
□ Add vital signs recording system with dropdown validation
□ Create "Notify Doctor" workflow
□ Implement time-based service availability
□ Add security middleware (rate limiting, helmet)

PHASE 3: HEALTHCARE WORKFLOW MODELS (Days 5-7)
------------------------------------------
Day 5:
□ Implement enhanced Appointment model with check-in workflow
□ Create ServiceSchedule model for daily service management
□ Implement CheckInSession model for tracking patient flow
□ Set up proper model relationships and references

Day 6:
□ Create enhanced MedicalRecord model with vaccination tracking
□ Implement Prescription model with medication management
□ Add vital signs validation and dropdown constraints
□ Implement notification system for doctor alerts

Day 7:
□ Create database seeders with healthcare schedule data
□ Implement model-level validation for medical workflows
□ Add soft delete functionality for sensitive data
□ Test model relationships and healthcare workflow integrity

PHASE 4: ADMIN DASHBOARD APIs (Days 8-9)
------------------------------------------
Day 8:
□ Implement patient management endpoints (CRUD)
□ Create family management APIs
□ Implement dashboard statistics endpoints
□ Add bulk operations for patient data

Day 9:
□ Create appointment management for admins
□ Implement user management (doctors, patients)
□ Add system configuration endpoints
□ Create audit logging for admin actions

PHASE 5: DOCTOR DASHBOARD APIs (Days 10-11)
------------------------------------------
Day 10:
□ Implement today's checkups endpoints
□ Create appointment management APIs
□ Implement patient database access for doctors
□ Add medical record creation/update endpoints

Day 11:
□ Create prescription management APIs
□ Implement appointment scheduling
□ Add patient search and filtering
□ Create medical history tracking

PHASE 6: PATIENT DASHBOARD APIs (Days 12-13)
------------------------------------------
Day 12:
□ Implement patient profile management
□ Create medical records viewing endpoints
□ Implement prescription history APIs
□ Add appointment history access

Day 13:
□ Create notification preferences management
□ Implement privacy settings APIs
□ Add data export functionality
□ Create patient communication endpoints

PHASE 7: FILE MANAGEMENT & QR CODES (Days 14-15)
------------------------------------------
Day 14:
□ Implement file upload middleware
□ Create avatar image upload functionality
□ Add medical document upload system
□ Implement file validation and security

Day 15:
□ Integrate QR code generation for patients
□ Create QR code scanning endpoints
□ Implement patient check-in via QR
□ Add QR code regeneration functionality

PHASE 8: NOTIFICATION SYSTEM (Days 16-17)
------------------------------------------
Day 16:
□ Set up email service configuration
□ Implement appointment reminder emails
□ Create prescription refill notifications
□ Add system alert emails

Day 17:
□ Implement in-app notification system
□ Create notification preferences management
□ Add real-time notifications (optional: Socket.io)
□ Implement notification history

PHASE 9: FRONTEND INTEGRATION (Days 18-20)
------------------------------------------
Day 18:
□ Create API service layer in frontend
□ Implement authentication context
□ Replace sample data with API calls in AdminDashboard
□ Add loading states and error handling

Day 19:
□ Integrate DocDashboard with backend APIs
□ Replace sample data in PatientDashboard
□ Implement form submissions with validation
□ Add real-time data updates

Day 20:
□ Complete frontend-backend integration
□ Implement proper error handling and user feedback
□ Add loading spinners and success messages
□ Test all user workflows end-to-end

PHASE 10: TESTING & OPTIMIZATION (Days 21-23)
------------------------------------------
Day 21:
□ Write unit tests for API endpoints
□ Implement integration tests
□ Test authentication and authorization
□ Verify data validation and error handling

Day 22:
□ Perform security testing
□ Test file upload functionality
□ Verify email notifications
□ Test QR code generation and scanning

Day 23:
□ Performance testing and optimization
□ Database query optimization
□ API response time optimization
□ Memory usage optimization

PHASE 11: DEPLOYMENT PREPARATION (Days 24-25)
------------------------------------------
Day 24:
□ Set up production environment variables
□ Configure production database
□ Implement logging and monitoring
□ Set up SSL certificates

Day 25:
□ Deploy to production server
□ Configure reverse proxy (nginx)
□ Set up backup systems
□ Final production testing

================================================================================
🗄️ 4. DATABASE DESIGN & SCHEMAS
================================================================================

USER SCHEMA:
------------------------------------------
{
  _id: ObjectId,
  username: String (unique, required),
  email: String (unique, required),
  password: String (hashed, required),
  role: Enum['admin', 'doctor', 'patient'] (required),
  profile: {
    firstName: String (required),
    lastName: String (required),
    contactNumber: String,
    address: String,
    avatar: String (file path),
    dateOfBirth: Date,
    gender: Enum['Male', 'Female', 'Other']
  },
  isActive: Boolean (default: true),
  isVerified: Boolean (default: false),
  lastLogin: Date,
  passwordResetToken: String,
  passwordResetExpires: Date,
  emailVerificationToken: String,
  preferences: {
    darkMode: Boolean (default: false),
    notifications: {
      email: Boolean (default: true),
      sms: Boolean (default: false),
      push: Boolean (default: true)
    }
  },
  createdAt: Date (default: Date.now),
  updatedAt: Date (default: Date.now)
}

PATIENT SCHEMA:
------------------------------------------
{
  _id: ObjectId,
  userId: ObjectId (ref: 'User', required),
  patientId: String (unique, auto-generated),
  personalInfo: {
    birthDate: Date (required),
    gender: Enum['Male', 'Female'] (required),
    bloodType: Enum['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'],
    emergencyContact: {
      name: String (required),
      relationship: String,
      phoneNumber: String (required)
    },
    insurance: {
      provider: String,
      policyNumber: String,
      expiryDate: Date
    }
  },
  familyId: ObjectId (ref: 'Family'),
  medicalHistory: [{
    type: ObjectId,
    ref: 'MedicalRecord'
  }],
  prescriptions: [{
    type: ObjectId,
    ref: 'Prescription'
  }],
  appointments: [{
    type: ObjectId,
    ref: 'Appointment'
  }],
  qrCode: String (unique),
  qrCodeGeneratedAt: Date,
  isActive: Boolean (default: true),
  notes: String,
  createdAt: Date (default: Date.now),
  updatedAt: Date (default: Date.now)
}

APPOINTMENT SCHEMA:
------------------------------------------
{
  _id: ObjectId,
  appointmentId: String (unique, auto-generated),
  patientId: ObjectId (ref: 'Patient', required),
  doctorId: ObjectId (ref: 'User'),
  checkInDate: Date (required), // Date when patient checked in via QR
  checkInTime: String (required), // Time when patient checked in
  serviceType: Enum[
    'consultation', 
    'dental-consultation', 
    'dental-procedure', 
    'dental-fluoride',
    'follow-up', 
    'out-patient', 
    'parental-consultation',
    'vaccination-bcg',
    'vaccination-hepatitis-b',
    'vaccination-polio',
    'vaccination-dtap',
    'vaccination-mmr',
    'vaccination-varicella',
    'vaccination-pneumococcal',
    'vaccination-hepatitis-a',
    'vaccination-influenza',
    'vaccination-rabies'
  ] (required),
  timeSlot: Enum['morning', 'afternoon'] (required),
  status: Enum['checked-in', 'vitals-pending', 'vitals-complete', 'doctor-notified', 'session-started', 'in-progress', 'completed', 'cancelled'] (default: 'checked-in'),
  priority: Enum['low', 'normal', 'high', 'urgent'] (default: 'normal'),
  vitalSigns: {
    bloodPressureSystolic: {
      type: Number,
      min: 90,
      max: 180
    },
    bloodPressureDiastolic: {
      type: Number,
      min: 60,
      max: 110
    },
    temperature: {
      type: Number, // in Celsius
      min: 35.0,
      max: 42.0,
      step: 0.1
    },
    weight: {
      type: Number, // in kg
      min: 2.0,
      max: 300.0
    },
    height: {
      type: Number, // in cm
      min: 40,
      max: 250
    },
    heartRate: {
      type: Number, // bpm
      min: 50,
      max: 120
    },
    respiratoryRate: {
      type: Number, // brpm
      min: 8,
      max: 30
    },
    oxygenSaturation: {
      type: Number, // percentage
      min: 70,
      max: 100
    },
    recordedBy: ObjectId (ref: 'User'),
    recordedAt: Date,
    isComplete: Boolean (default: false),
    vitalSignsHistory: [{ // For tracking multiple vital signs entries
      readings: Object,
      recordedBy: ObjectId (ref: 'User'),
      recordedAt: Date
    }]
  },
  requiresVitalSigns: Boolean (default: true), // Based on service type
  sessionInfo: {
    startedAt: Date,
    startedBy: ObjectId (ref: 'User'), // Doctor who started session
    notes: String,
    prescriptions: [{
      medication: String,
      dosage: String,
      frequency: String,
      duration: String,
      instructions: String
    }],
    completedAt: Date
  },
  reason: String,
  symptoms: [String],
  notes: String,
  diagnosis: String,
  treatment: String,
  followUpDate: Date,
  documents: [String], // file paths
  doctorNotifiedAt: Date,
  completedAt: Date,
  createdAt: Date (default: Date.now),
  updatedAt: Date (default: Date.now)
}

MEDICAL RECORD SCHEMA:
------------------------------------------
{
  _id: ObjectId,
  recordId: String (unique, auto-generated),
  patientId: ObjectId (ref: 'Patient', required),
  doctorId: ObjectId (ref: 'User', required),
  appointmentId: ObjectId (ref: 'Appointment'),
  recordType: Enum['treatment', 'dental', 'immunization', 'laboratory', 'imaging'] (required),
  date: Date (required),
  diagnosis: String,
  treatment: String,
  medications: [{
    name: String,
    dosage: String,
    frequency: String,
    duration: String
  }],
  // Specific fields for different record types
  dentalInfo: {
    procedure: String,
    toothNumber: String,
    notes: String
  },
  immunizationInfo: {
    vaccine: String (required if type is immunization),
    lotNumber: String,
    manufacturer: String,
    administeredBy: String,
    nextDueDate: Date
  },
  laboratoryInfo: {
    testType: String,
    results: String,
    normalRange: String,
    status: Enum['pending', 'completed', 'abnormal']
  },
  vitals: {
    bloodPressure: String,
    temperature: Number,
    weight: Number,
    height: Number,
    heartRate: Number
  },
  notes: String,
  documents: [String], // file paths to reports, images
  followUpRequired: Boolean (default: false),
  followUpDate: Date,
  isActive: Boolean (default: true),
  createdAt: Date (default: Date.now),
  updatedAt: Date (default: Date.now)
}

PRESCRIPTION SCHEMA:
------------------------------------------
{
  _id: ObjectId,
  prescriptionId: String (unique, auto-generated),
  patientId: ObjectId (ref: 'Patient', required),
  doctorId: ObjectId (ref: 'User', required),
  appointmentId: ObjectId (ref: 'Appointment'),
  medicalRecordId: ObjectId (ref: 'MedicalRecord'),
  medications: [{
    name: String (required),
    genericName: String,
    dosage: String (required),
    frequency: String (required),
    duration: String (required),
    instructions: String,
    quantity: Number,
    refills: Number (default: 0)
  }],
  dateIssued: Date (required),
  dateCompleted: Date,
  status: Enum['active', 'completed', 'cancelled', 'expired'] (default: 'active'),
  pharmacy: {
    name: String,
    address: String,
    contactNumber: String
  },
  notes: String,
  allergies: [String],
  warnings: [String],
  isActive: Boolean (default: true),
  createdAt: Date (default: Date.now),
  updatedAt: Date (default: Date.now)
}

FAMILY SCHEMA:
------------------------------------------
{
  _id: ObjectId,
  familyId: String (unique, auto-generated),
  familyName: String (required),
  headOfFamily: ObjectId (ref: 'Patient'),
  members: [{
    patientId: ObjectId (ref: 'Patient'),
    relationship: String,
    isPrimary: Boolean (default: false)
  }],
  address: {
    street: String,
    barangay: String,
    city: String,
    province: String,
    zipCode: String
  },
  contactNumber: String,
  emergencyContact: {
    name: String,
    relationship: String,
    phoneNumber: String
  },
  notes: String,
  isActive: Boolean (default: true),
  createdAt: Date (default: Date.now),
  updatedAt: Date (default: Date.now)
}

NOTIFICATION SCHEMA:
------------------------------------------
{
  _id: ObjectId,
  recipientId: ObjectId (ref: 'User', required),
  type: Enum['appointment', 'prescription', 'result', 'system', 'reminder'] (required),
  title: String (required),
  message: String (required),
  data: Object, // Additional data specific to notification type
  channels: {
    email: Boolean (default: true),
    sms: Boolean (default: false),
    push: Boolean (default: true),
    inApp: Boolean (default: true)
  },
  status: Enum['pending', 'sent', 'delivered', 'failed'] (default: 'pending'),
  sentAt: Date,
  readAt: Date,
  isRead: Boolean (default: false),
  priority: Enum['low', 'normal', 'high'] (default: 'normal'),
  scheduledFor: Date,
  expiresAt: Date,
  createdAt: Date (default: Date.now)
}

SERVICE SCHEDULE SCHEMA:
------------------------------------------
{
  _id: ObjectId,
  dayOfWeek: Enum['monday', 'tuesday', 'wednesday', 'thursday', 'friday'] (required),
  timeSlot: Enum['morning', 'afternoon'] (required),
  availableServices: [{
    serviceType: String (required),
    requiresVitalSigns: Boolean (default: true),
    maxCapacity: Number (default: 50),
    description: String
  }],
  isActive: Boolean (default: true),
  createdAt: Date (default: Date.now),
  updatedAt: Date (default: Date.now)
}

CHECK_IN_SESSION SCHEMA:
------------------------------------------
{
  _id: ObjectId,
  patientId: ObjectId (ref: 'Patient', required),
  qrCode: String (required),
  checkInDate: Date (required),
  sessionStatus: Enum['active', 'completed', 'expired'] (default: 'active'),
  selectedService: String,
  timeSlot: Enum['morning', 'afternoon'],
  vitalSignsRequired: Boolean,
  vitalSignsCompleted: Boolean (default: false),
  doctorNotified: Boolean (default: false),
  appointmentId: ObjectId (ref: 'Appointment'),
  createdBy: ObjectId (ref: 'User'), // Staff who processed check-in
  expiresAt: Date, // End of day
  createdAt: Date (default: Date.now)
}

================================================================================
🛠️ 5. API ENDPOINTS SPECIFICATION
================================================================================

AUTHENTICATION ENDPOINTS:
------------------------------------------
POST   /api/auth/register           # User registration (with duplicate check)
POST   /api/auth/login              # User login (account access only, not check-in)
POST   /api/auth/logout             # User logout
POST   /api/auth/refresh            # Refresh JWT token
POST   /api/auth/forgot-password    # Request password reset
POST   /api/auth/reset-password     # Reset password with token
POST   /api/auth/verify-email       # Verify email address
POST   /api/auth/resend-verification # Resend verification email
POST   /api/auth/check-existing     # Check if account exists (for registration flow)

ADMIN DASHBOARD ENDPOINTS:
------------------------------------------
GET    /api/admin/dashboard         # Dashboard statistics
GET    /api/admin/users             # Get all users
POST   /api/admin/users             # Create new user
POST   /api/admin/patients          # Staff-assisted patient registration
PUT    /api/admin/patients/:id      # Update patient
DELETE /api/admin/patients/:id      # Delete patient
GET    /api/admin/families          # Get all families
POST   /api/admin/families          # Create new family
PUT    /api/admin/families/:id      # Update family
DELETE /api/admin/families/:id      # Delete family
GET    /api/admin/today-checkups    # Today's checked-in patients
POST   /api/admin/vital-signs/:appointmentId # Record vital signs
PUT    /api/admin/vital-signs/:appointmentId  # Update vital signs
POST   /api/admin/notify-doctor/:appointmentId # Notify doctor (after vital signs)
GET    /api/admin/available-services # Get available services for current time
GET    /api/admin/reports           # Generate reports
GET    /api/admin/audit-logs        # Get system audit logs

CHECK-IN & QR CODE ENDPOINTS:
------------------------------------------
POST   /api/checkin/qr-scan         # QR code scan for check-in
POST   /api/checkin/select-service  # Select service type after scan
GET    /api/checkin/available-services/:timeSlot # Get available services for time slot
POST   /api/checkin/confirm         # Confirm check-in with selected service
GET    /api/checkin/status/:sessionId # Check current check-in session status

SERVICE SCHEDULE ENDPOINTS:
------------------------------------------
GET    /api/schedule/current        # Current day's available services
GET    /api/schedule/week           # Full week schedule
GET    /api/schedule/day/:dayOfWeek # Specific day schedule
POST   /api/schedule/services       # Add/update service schedule (admin only)
PUT    /api/schedule/services/:id   # Update service schedule
DELETE /api/schedule/services/:id   # Remove service schedule

DOCTOR DASHBOARD ENDPOINTS:
------------------------------------------
GET    /api/doctor/dashboard        # Doctor dashboard data
GET    /api/doctor/checkups/today   # Today's patients ready for doctor
GET    /api/doctor/checkups/ongoing # Currently active sessions
GET    /api/doctor/checkups/finished # Today's completed sessions
GET    /api/doctor/patient/:id/info # Patient information details
GET    /api/doctor/patient/:id/vital-signs # Current vital signs
GET    /api/doctor/patient/:id/vital-signs/history # Vital signs history
POST   /api/doctor/session/start/:appointmentId # Start patient session
PUT    /api/doctor/session/:appointmentId/notes # Update session notes
POST   /api/doctor/session/:appointmentId/prescription # Add prescription
PUT    /api/doctor/session/:appointmentId/complete # Complete session
GET    /api/doctor/sessions/history # Session history with filters
GET    /api/doctor/appointments     # Doctor's appointments
POST   /api/doctor/appointments     # Create new appointment
PUT    /api/doctor/appointments/:id # Update appointment
DELETE /api/doctor/appointments/:id # Cancel appointment
GET    /api/doctor/patients         # Doctor's patients database
GET    /api/doctor/patients/:id     # Get specific patient details
POST   /api/doctor/medical-records  # Create medical record
PUT    /api/doctor/medical-records/:id # Update medical record
GET    /api/doctor/medical-records/:patientId # Get patient's medical records
POST   /api/doctor/prescriptions    # Create prescription
PUT    /api/doctor/prescriptions/:id # Update prescription
GET    /api/doctor/prescriptions/:patientId # Get patient's prescriptions
GET    /api/doctor/schedule         # Doctor's schedule
PUT    /api/doctor/schedule         # Update doctor's schedule

PATIENT DASHBOARD ENDPOINTS:
------------------------------------------
GET    /api/patient/profile         # Patient profile
PUT    /api/patient/profile         # Update patient profile
GET    /api/patient/medical-records # Patient's medical records
GET    /api/patient/medical-records/:id # Specific medical record
GET    /api/patient/prescriptions   # Patient's prescriptions
GET    /api/patient/prescriptions/active # Active prescriptions
GET    /api/patient/prescriptions/history # Prescription history
GET    /api/patient/appointments    # Patient's appointments
POST   /api/patient/appointments    # Request new appointment
PUT    /api/patient/appointments/:id # Update appointment request
DELETE /api/patient/appointments/:id # Cancel appointment
GET    /api/patient/family          # Family information
PUT    /api/patient/emergency-contact # Update emergency contact
GET    /api/patient/qr-code         # Get patient QR code
POST   /api/patient/qr-code/regenerate # Regenerate QR code

SHARED ENDPOINTS:
------------------------------------------
GET    /api/shared/notifications    # Get user notifications
PUT    /api/shared/notifications/:id/read # Mark notification as read
DELETE /api/shared/notifications/:id # Delete notification
POST   /api/shared/upload           # Upload file
GET    /api/shared/download/:fileId # Download file
GET    /api/shared/search/patients  # Search patients (role-based)
GET    /api/shared/search/doctors   # Search doctors
GET    /api/shared/locations        # Get locations (barangays, cities)

USER MANAGEMENT ENDPOINTS:
------------------------------------------
GET    /api/users/profile           # Get current user profile
PUT    /api/users/profile           # Update user profile
POST   /api/users/avatar            # Upload profile avatar
PUT    /api/users/password          # Change password
PUT    /api/users/preferences       # Update user preferences
DELETE /api/users/account           # Delete user account

NOTIFICATION ENDPOINTS:
------------------------------------------
GET    /api/notifications           # Get user notifications
POST   /api/notifications/send      # Send notification (admin only)
PUT    /api/notifications/:id/read  # Mark as read
DELETE /api/notifications/:id       # Delete notification
PUT    /api/notifications/preferences # Update notification preferences

================================================================================
🔒 6. AUTHENTICATION & SECURITY
================================================================================

JWT AUTHENTICATION STRATEGY:
------------------------------------------
• Access Token: 15 minutes expiry
• Refresh Token: 7 days expiry
• Tokens stored in httpOnly cookies
• CSRF protection enabled
• Role-based access control (RBAC)

ROLE PERMISSIONS:
------------------------------------------
ADMIN:
✓ Full system access
✓ User management (create, update, delete users)
✓ Patient management (all patients)
✓ Family management
✓ Appointment management (all appointments)
✓ System configuration
✓ Reports and analytics
✓ Audit logs access

DOCTOR:
✓ View assigned patients
✓ Manage own appointments
✓ Create/update medical records
✓ Prescribe medications
✓ View patient medical history
✓ Schedule appointments
✓ Access patient QR codes
✗ User management
✗ System configuration

PATIENT:
✓ View own profile and medical data
✓ Update personal information
✓ View medical records
✓ View prescriptions
✓ View appointment history
✓ Request appointments
✓ Access own QR code
✗ View other patients' data
✗ Administrative functions

SECURITY MEASURES:
------------------------------------------
• Password hashing with bcrypt (12 rounds)
• Input validation and sanitization
• SQL injection prevention (using Mongoose)
• XSS protection with helmet
• CORS configuration
• Rate limiting (100 requests per 15 minutes per IP)
• File upload validation and size limits
• Secure headers (helmet.js)
• Environment variables for sensitive config
• Audit logging for sensitive operations

PASSWORD REQUIREMENTS:
------------------------------------------
• Minimum 8 characters
• At least 1 uppercase letter
• At least 1 lowercase letter
• At least 1 number
• At least 1 special character
• Cannot contain username or email
• Cannot be a common password

================================================================================
🔗 7. FRONTEND INTEGRATION STRATEGY
================================================================================

API SERVICE LAYER (src/services/api.js):
------------------------------------------
```javascript
import axios from 'axios';

const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';

const api = axios.create({
  baseURL: API_BASE_URL,
  withCredentials: true, // For httpOnly cookies
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor for auth token
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('accessToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Response interceptor for token refresh
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    if (error.response?.status === 401) {
      try {
        const refreshResponse = await api.post('/auth/refresh');
        const { accessToken } = refreshResponse.data;
        localStorage.setItem('accessToken', accessToken);
        
        // Retry original request
        const originalRequest = error.config;
        originalRequest.headers.Authorization = `Bearer ${accessToken}`;
        return api(originalRequest);
      } catch (refreshError) {
        // Refresh failed, redirect to login
        localStorage.removeItem('accessToken');
        window.location.href = '/auth';
      }
    }
    return Promise.reject(error);
  }
);

export default api;
```

AUTHENTICATION CONTEXT (src/context/AuthContext.js):
------------------------------------------
```javascript
import React, { createContext, useContext, useReducer, useEffect } from 'react';
import api from '../services/api';

const AuthContext = createContext();

const authReducer = (state, action) => {
  switch (action.type) {
    case 'LOGIN_SUCCESS':
      return {
        ...state,
        isAuthenticated: true,
        user: action.payload.user,
        loading: false,
      };
    case 'LOGOUT':
      return {
        ...state,
        isAuthenticated: false,
        user: null,
        loading: false,
      };
    case 'SET_LOADING':
      return {
        ...state,
        loading: action.payload,
      };
    default:
      return state;
  }
};

export const AuthProvider = ({ children }) => {
  const [state, dispatch] = useReducer(authReducer, {
    isAuthenticated: false,
    user: null,
    loading: true,
  });

  useEffect(() => {
    checkAuthStatus();
  }, []);

  const checkAuthStatus = async () => {
    try {
      const response = await api.get('/users/profile');
      dispatch({
        type: 'LOGIN_SUCCESS',
        payload: { user: response.data.user },
      });
    } catch (error) {
      dispatch({ type: 'LOGOUT' });
    }
  };

  const login = async (credentials) => {
    try {
      const response = await api.post('/auth/login', credentials);
      const { user, accessToken } = response.data;
      
      localStorage.setItem('accessToken', accessToken);
      dispatch({
        type: 'LOGIN_SUCCESS',
        payload: { user },
      });
      
      return { success: true };
    } catch (error) {
      return {
        success: false,
        message: error.response?.data?.message || 'Login failed',
      };
    }
  };

  const logout = async () => {
    try {
      await api.post('/auth/logout');
    } catch (error) {
      console.error('Logout error:', error);
    } finally {
      localStorage.removeItem('accessToken');
      dispatch({ type: 'LOGOUT' });
    }
  };

  return (
    <AuthContext.Provider
      value={{
        ...state,
        login,
        logout,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
```

API SERVICE MODULES:
------------------------------------------
src/services/
├── authService.js          # Authentication APIs
├── adminService.js         # Admin dashboard APIs
├── doctorService.js        # Doctor dashboard APIs
├── patientService.js       # Patient dashboard APIs
├── appointmentService.js   # Appointment management
├── medicalRecordService.js # Medical records
├── prescriptionService.js  # Prescription management
├── notificationService.js  # Notifications
└── uploadService.js        # File uploads

FRONTEND INTEGRATION STEPS:
------------------------------------------
1. Replace useState sample data with API calls
2. Add loading states for all async operations
3. Implement error handling and user feedback
4. Add form validation with backend validation
5. Implement real-time updates where needed
6. Add offline support for critical functions
7. Implement caching for frequently accessed data
8. Add retry mechanisms for failed requests

STATE MANAGEMENT UPDATES:
------------------------------------------
• Replace sample data arrays with API-fetched data
• Add loading states (isLoading, isSubmitting)
• Add error states for proper error handling
• Implement optimistic updates for better UX
• Add data refresh mechanisms
• Implement proper data synchronization

================================================================================
🚀 8. DEPLOYMENT & TESTING PLAN
================================================================================

TESTING STRATEGY:
------------------------------------------
Unit Tests:
□ API endpoint functionality
□ Database model validation
□ Authentication middleware
□ Utility functions
□ Input validation

Integration Tests:
□ Authentication flow
□ CRUD operations
□ File upload functionality
□ Email notifications
□ QR code generation/scanning

End-to-End Tests:
□ User registration and login
□ Patient management workflow
□ Appointment scheduling process
□ Medical record creation
□ Prescription management

Security Tests:
□ SQL injection attempts
□ XSS vulnerability testing
□ Authentication bypass attempts
□ File upload security
□ Rate limiting effectiveness

DEPLOYMENT ENVIRONMENTS:
------------------------------------------
Development:
• Local MongoDB instance
• Local file storage
• Debug logging enabled
• Development CORS settings

Staging:
• Cloud MongoDB (MongoDB Atlas)
• Cloud file storage (AWS S3/Cloudinary)
• Production-like configuration
• Limited access for testing

Production:
• High-availability MongoDB cluster
• CDN for file delivery
• SSL/TLS encryption
• Production monitoring and logging
• Backup and disaster recovery

DEPLOYMENT CHECKLIST:
------------------------------------------
□ Environment variables configured
□ Database migrations completed
□ SSL certificates installed
□ Domain name configured
□ Reverse proxy setup (nginx)
□ Process manager (PM2) configured
□ Monitoring tools installed
□ Backup systems configured
□ Log rotation setup
□ Security headers configured

================================================================================
⏰ 9. PROJECT TIMELINE
================================================================================

WEEK 1 (Days 1-7): Foundation & Core Models
------------------------------------------
Mon: Project setup and database configuration
Tue: Authentication system implementation
Wed: Core data models (User, Patient, Family)
Thu: Medical record and appointment models
Fri: Model relationships and validation
Sat: Database seeders and testing
Sun: Code review and documentation

WEEK 2 (Days 8-14): API Development
------------------------------------------
Mon: Admin dashboard APIs
Tue: Doctor dashboard APIs  
Wed: Patient dashboard APIs
Thu: File upload and QR code system
Fri: Authentication integration
Sat: API testing and validation
Sun: Security implementation

WEEK 3 (Days 15-21): Integration & Testing
------------------------------------------
Mon: Notification system
Tue: Frontend API integration
Wed: Replace sample data with API calls
Thu: Error handling and validation
Fri: End-to-end testing
Sat: Performance optimization
Sun: Security testing

WEEK 4 (Days 22-25): Deployment & Polish
------------------------------------------
Mon: Production environment setup
Tue: Deployment and configuration
Wed: Final testing and bug fixes
Thu: Documentation and training
Fri: Go-live and monitoring

================================================================================
💻 10. TECHNICAL REQUIREMENTS
================================================================================

SERVER REQUIREMENTS:
------------------------------------------
Minimum:
• CPU: 2 cores, 2.0 GHz
• RAM: 4 GB
• Storage: 50 GB SSD
• Network: 100 Mbps

Recommended:
• CPU: 4 cores, 2.5 GHz+  
• RAM: 8 GB+
• Storage: 100 GB SSD
• Network: 1 Gbps

SOFTWARE REQUIREMENTS:
------------------------------------------
• Node.js 18.x or higher
• MongoDB 6.x or higher
• nginx (reverse proxy)
• PM2 (process manager)
• SSL certificate
• Domain name

DEVELOPMENT TOOLS:
------------------------------------------
• VS Code or preferred IDE
• Postman (API testing)
• MongoDB Compass (database GUI)
• Git (version control)
• Docker (containerization - optional)

DEPENDENCIES TO INSTALL:
------------------------------------------
npm install express mongoose bcryptjs jsonwebtoken cors helmet
npm install express-validator multer nodemailer qrcode
npm install express-rate-limit cookie-parser dotenv
npm install --save-dev nodemon jest supertest

ENVIRONMENT VARIABLES:
------------------------------------------
NODE_ENV=production
PORT=5000
MONGODB_URI=mongodb://localhost:27017/maybunga_healthcare
JWT_SECRET=your_super_secret_jwt_key
JWT_REFRESH_SECRET=your_refresh_token_secret
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your_email@gmail.com
EMAIL_PASS=your_app_password
UPLOAD_PATH=./uploads
MAX_FILE_SIZE=5242880
FRONTEND_URL=http://localhost:3000

================================================================================
📞 SUPPORT & NEXT STEPS
================================================================================

IMMEDIATE NEXT STEPS:
------------------------------------------
1. Review this implementation plan
2. Set up development environment
3. Initialize backend project structure
4. Configure database connection
5. Begin Phase 1 implementation

SUPPORT RESOURCES:
------------------------------------------
• MongoDB Documentation: https://docs.mongodb.com/
• Express.js Guide: https://expressjs.com/
• JWT Best Practices: https://auth0.com/blog/a-look-at-the-latest-draft-for-jwt-bcp/
• Node.js Security Checklist: https://blog.risingstack.com/node-js-security-checklist/

RECOMMENDED READING:
------------------------------------------
• RESTful API Design Best Practices
• Healthcare Data Security Guidelines
• HIPAA Compliance for Healthcare Applications
• MongoDB Schema Design Patterns

================================================================================
END OF IMPLEMENTATION PLAN
================================================================================

## 🩺 **VITAL SIGNS VALIDATION RANGES & DOCTOR WORKFLOW**

### STANDARD VITAL SIGNS RANGES (for dropdown validation):
------------------------------------------
**Blood Pressure (mmHg):**
- Systolic: 90-180 (Normal: 90-120, Pre-hypertension: 120-139, High: 140+)
- Diastolic: 60-110 (Normal: 60-80, Pre-hypertension: 80-89, High: 90+)

**Temperature (°C):**
- Range: 35.0-42.0 (Normal: 36.1-37.2, Fever: 37.3+, Hypothermia: <35.0)

**Heart Rate (bpm):**
- Adults: 50-120 (Normal: 60-100, Bradycardia: <60, Tachycardia: >100)
- Children: 70-140, Infants: 100-160

**Weight (kg):**
- Range: 2.0-300.0 (validation based on age group)

**Height (cm):**
- Range: 40-250 (validation based on age group)

**Respiratory Rate (brpm):**
- Adults: 8-30 (Normal: 12-20, Bradypnea: <12, Tachypnea: >20)
- Children: 15-40, Infants: 30-60

**Oxygen Saturation (%):**
- Range: 70-100 (Normal: 95-100, Hypoxemia: <90)

### QR CODE STRUCTURE:
------------------------------------------
```json
{
  "patientId": "MHC-2025-000123",
  "email": "patient@email.com",
  "phone": "09123456789",
  "name": "Maria Santos",
  "checksum": "abc123def456"
}
```

### DOCTOR WORKFLOW IMPLEMENTATION:
------------------------------------------
**Today's Checkup Enhancements:**
- Convert action icons to modern buttons
- Add "View Info", "View Vital Signs", "Vital Signs History" buttons
- Add "Start Session" button (enabled after vital signs review)

**Ongoing Section (Card-based Design):**
- Patient Name, Patient ID, Time Started
- Service Type, Vital Signs Button
- Notes Text Area, Prescription Dropdown
- "Complete Session" Button

**Session Status Flow:**
- checked-in → vitals-complete → doctor-notified → in-progress → completed

**Finished Section:**
- Day-based storage with sortable filters
- Appointment History integration
- Filters: Day, Week, Month, 3 Months, 6 Months, Year, All-time

### GOOGLE CLOUD HOSTING RECOMMENDATION:
------------------------------------------
**Recommended Stack:**
- **Compute:** Google Cloud Run (containerized, auto-scaling)
- **Database:** MongoDB Atlas (managed MongoDB)
- **Storage:** Google Cloud Storage (file uploads, documents)
- **CDN:** Google Cloud CDN (fast content delivery)
- **Security:** Google Cloud Load Balancer with SSL
- **Monitoring:** Google Cloud Monitoring & Logging

**Benefits for Healthcare System:**
- HIPAA-compliant infrastructure available
- 99.95% uptime SLA
- Auto-scaling for varying patient loads
- Built-in DDoS protection
- Data encryption at rest and in transit
- Backup and disaster recovery
- Cost-effective pay-per-use model

================================================================================

This comprehensive plan provides a roadmap for implementing a robust, secure, 
and scalable backend for the Maybunga Healthcare Management System. Follow 
each phase systematically to ensure successful integration with the existing 
frontend components.

Last Updated: July 21, 2025
